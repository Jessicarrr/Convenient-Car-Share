@model ConvenientCarShare.Views.Customer.IndexModel
@{
    ViewData["Title"] = "Dashboard";
}



@Html.Raw(TempData["msg"])
<nav class="navbar navbar-default nav-stacked" style="margin-bottom:0px">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#filter-collapse" style="margin-left:15px">
                <span class="glyphicon glyphicon-filter"></span>
            </button>
            <!--<p class="navbar-text text-right" style="margin-top:23px">Filter</p>-->
        </div>
        <div class="navbar-collapse collapse" id="filter-collapse">

            @if (Model.HasBookingsWithoutReturns)
            {
                <div class="alert alert-danger" role="alert">
                    You have one or more bookings running, returning car?
                    <a href="@Url.Action("ManageTrips", "Bookings")">Click here to view your bookings.</a>
                </div>
            }

            <form class="navbar-form" id="filter-form">
                <div class="input-group">
                    <span class="input-group-addon">Car Brand</span>
                    <select class="input-sm form-control" name="car-type" id="car_type">
                    </select>
                </div>

                <div class="input-group">
                    <span class="input-group-addon">Min $</span>
                    <input type="number" class="input-sm form-control" name="min-price" id="min-price" min=0 max=150 value=0 required/>
                    <span class="input-group-addon">Max $</span>
                    <input type="number" class="input-sm form-control" name="max-price" id="max-price" min=0 max=150 value=150 required/>
                </div>

                <div class="row">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i> Start Time</span>
                        <input type='text' class="form-control" id='start-datetime' name="start-datetime" />
                    </div>
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i> End Time&nbsp;</span>
                        <input type='text' class="form-control" id='end-datetime' name="end-datetime" />
                    </div>
                </div>
                <button type="submit" class="btn btn-info">Update</button>
            </form>
        </div>
    </div>
</nav>



























<div id="map"></div>







@section Scripts

    {
    <script src="~/lib/bootstrap/dist/js/moment-with-locales.min.js"></script>
    <!--<script src="https://cdn.bootcss.com/moment.js/2.18.1/moment-with-locales.min.js"></script>-->
    <link href="~/lib/bootstrap/dist/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />
    <script src="~/lib/bootstrap/dist/js/bootstrap-datetimepicker.min.js"></script>
    <script type="text/javascript" src="~/js/dashboardMap.js"></script>

    <script type="text/javascript">

        var spotsAndCars = new Map();
        var select = new Array();

        @foreach (KeyValuePair<ParkingArea, List<Car>> entry in Model.ParkingInfo)
        {
            var parkingArea = entry.Key;
            var carList = entry.Value;


            <text>
                var carArray = new Array();

                var parkingAreaDetails = new Map();
                parkingAreaDetails.set("Longitude", @parkingArea.Longitude);
                parkingAreaDetails.set("Latitude", @parkingArea.Latitude);
            </text>

            foreach(var car in carList)
            {
                <text>
                    var carDetails = new Map();
                    carDetails.set("Id", @car.Id);
                    carDetails.set("Model", "@car.Model");
                    carDetails.set("Brand", "@car.Brand");
                    carDetails.set("Latitude", @car.Latitude);
                    carDetails.set("Longitude", @car.Longitude);
                    carDetails.set("Colour", "@car.Colour");
                    carDetails.set("Price", "@car.Price");
        carDetails.set("Capacity", "@car.Capacity");
        carArray.push(carDetails);

        if (select.indexOf("@car.Brand") == -1) { 

                    select.push("@car.Brand");

        }

                </text>

            }
            <text>
                //console.log("Parking area: " + parkingArea);
                //console.log("car array: " + carArray);
                spotsAndCars.set(parkingAreaDetails, carArray);
            </text>
        }

        var select_drop = document.getElementById("car_type");

        var opt = document.createElement("option");
        opt.value = "All";
        opt.text = "All";
        select_drop.add(opt, null);
    
        for (var i = 0; i < select.length; i++) {

            var opt = document.createElement("option");
            opt.value = select[i];
            opt.text = select[i];
            select_drop.add(opt, null);
        }
        



    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDRKU2-51-N915Lv4-_YRRoiPOku5VDS08&callback=initMap"></script>
    <style>
        .input-group {
            margin: 15px;
        }

        #filter-btn {
            margin: 15px;
        }

        #map {
            height: 750px;
        }

        @@media (max-width: 768px) {
            #map {
                height: 500px;
            }
        }


        /* Made for big map */
        #main-content {
            padding-left: 0;
            padding-right: 0;
            margin-left: 0;
            margin-right: 0;
            height: 100%;
            display: inline;
            text-align: center;
        }

        .navbar-form {
            border: 0px;
        }
    </style>
}
